apiVersion: v1
kind: ConfigMap
metadata:
  name: kv-config
data:
  NODES: "[1, 2, 3]"
  CONFIG_ID: "1"
  RUST_BACKTRACE: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: kv-store
  labels:
    app: kv-store
spec:
  clusterIP: None  # Headless service, required for StatefulSet DNS
  selector:
    app: kv-store
  ports:
    - name: "api"
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: net
  labels:
    app: net
spec:
  clusterIP: None  # Headless service, no single IP
  selector:
    app: net
  ports:
    - name: "8001"
      port: 8001
      targetPort: 8001
    - name: "8002"
      port: 8002
      targetPort: 8002
    - name: "8003"
      port: 8003
      targetPort: 8003
    - name: "8004"
      port: 8004
      targetPort: 8004
    - name: "8012"
      port: 8012
      targetPort: 8012
    - name: "8013"
      port: 8013
      targetPort: 8013
    - name: "8014"
      port: 8014
      targetPort: 8014
    - name: "8021"
      port: 8021
      targetPort: 8021
    - name: "8023"
      port: 8023
      targetPort: 8023
    - name: "8024"
      port: 8024
      targetPort: 8024
    - name: "8031"
      port: 8031
      targetPort: 8031
    - name: "8032"
      port: 8032
      targetPort: 8032
    - name: "8034"
      port: 8034
      targetPort: 8034
    - name: "8041"
      port: 8041
      targetPort: 8041
    - name: "8042"
      port: 8042
      targetPort: 8042
    - name: "8043"
      port: 8043
      targetPort: 8043
---
apiVersion: v1
kind: Pod
metadata:
  name: net
  labels:
    app: net
spec:
  containers:
    - name: net
      image: ritikaanand/kvs_network_actor:v1.1
      imagePullPolicy: Always
      stdin: true
      tty: true
      ports:
        - containerPort: 8001
        - containerPort: 8002
        - containerPort: 8003
        - containerPort: 8004
        - containerPort: 8013
        - containerPort: 8012
        - containerPort: 8023
        - containerPort: 8021
        - containerPort: 8032
        - containerPort: 8031
      env:
        - name: PORT_MAPPINGS
          value: "[[8013,8031],[8012,8021],[8023,8032],[8014,8041],[8024,8042],[8034,8043]]"
        - name: CLIENT_PORTS
          value: "[8001,8002,8003,8004]"
        - name: NODES  
          valueFrom:
            configMapKeyRef:
              name: kv-config
              key: NODES
        - name: RUST_BACKTRACE
          valueFrom:
            configMapKeyRef:
              name: kv-config
              key: RUST_BACKTRACE
      resources:
        requests:
          cpu: "250m"
          memory: "256Mi"
        limits:
          cpu: "500m"
          memory: "512Mi"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kv-store
spec:
  serviceName: "kv-store"
  replicas: 3
  selector:
    matchLabels:
      app: kv-store
  template:
    metadata:
      labels:
        app: kv-store
    spec:
      restartPolicy: Always  # Ensures pod restarts instead of fresh creation
      containers:
        - name: kv-store
          image: ritikaanand/kvsdemo:v10.1  # Replace with your actual image
          imagePullPolicy: Always
          env:
            - name: NODES
              valueFrom:
                configMapKeyRef:
                  name: kv-config
                  key: NODES
            - name: RUST_BACKTRACE
              valueFrom:
                configMapKeyRef:
                  name: kv-config
                  key: RUST_BACKTRACE
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONFIG_ID
              valueFrom:
                configMapKeyRef:
                  name: kv-config
                  key: CONFIG_ID
          command: ["/bin/sh", "-c"]
          args: ["export PID=$(echo $POD_NAME | sed 's/[^0-9]*\\([0-9]*\\)$/\\1/') && PID=$((PID + 1)) && exec kv_demo"]
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: omnipaxos-storage
              mountPath: /data
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
  volumeClaimTemplates:
    - metadata:
        name: omnipaxos-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 11Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-watcher
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-watcher-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-watcher
  apiGroup: rbac.authorization.k8s.io